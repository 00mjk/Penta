/* Generated By:JavaCC: Do not edit this line. PentaParser.java */
package foo;

public class PentaParser implements PentaParserConstants {

  static final public void Scope() throws ParseException {
    jj_consume_token(5);
    jj_consume_token(ID);
    jj_consume_token(6);
    Declarations();
    Essay();
    jj_consume_token(7);
  }

  static final public void Declarations() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 8:
      BeatDeclaration();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    SpeedDeclaration();
    InstrumentDeclaration();
    VelocityDeclaration();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 15:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      StropheDeclaration();
    }
  }

  static final public void BeatDeclaration() throws ParseException {
    jj_consume_token(8);
    jj_consume_token(9);
    jj_consume_token(DIGIT);
    jj_consume_token(10);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMIBREVE:
      jj_consume_token(SEMIBREVE);
      break;
    case MINIM:
      jj_consume_token(MINIM);
      break;
    case CROTCHET:
      jj_consume_token(CROTCHET);
      break;
    case QUAVER:
      jj_consume_token(QUAVER);
      break;
    case SEMIQUAVER:
      jj_consume_token(SEMIQUAVER);
      break;
    case DEMISEMIQUAVER:
      jj_consume_token(DEMISEMIQUAVER);
      break;
    case HEMIDEMISEMIQUAVER:
      jj_consume_token(HEMIDEMISEMIQUAVER);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(11);
  }

  static final public void VelocityDeclaration() throws ParseException {
    jj_consume_token(12);
    jj_consume_token(9);
    jj_consume_token(INTEGER);
    jj_consume_token(11);
  }

  static final public void SpeedDeclaration() throws ParseException {
    jj_consume_token(13);
    jj_consume_token(9);
    jj_consume_token(INTEGER);
    jj_consume_token(11);
  }

  static final public void InstrumentDeclaration() throws ParseException {
    jj_consume_token(14);
    jj_consume_token(9);
    jj_consume_token(ID);
    jj_consume_token(11);
  }

  static final public void StropheDeclaration() throws ParseException {
    jj_consume_token(15);
    jj_consume_token(ID);
    jj_consume_token(6);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
    case SEMITUNE:
    case SILENCE:
    case TUNE:
    case ID:
      Sequence();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(7);
  }

  static final public void Essay() throws ParseException {
    jj_consume_token(16);
    jj_consume_token(ID);
    jj_consume_token(6);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
    case SEMITUNE:
    case SILENCE:
    case TUNE:
    case ID:
      Sequence();
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(7);
  }

  static final public void Sequence() throws ParseException {
    label_2:
    while (true) {
      Notes();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case SEMITUNE:
      case SILENCE:
      case TUNE:
      case ID:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
    }
  }

  static final public void Notes() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
    case SEMITUNE:
    case SILENCE:
    case TUNE:
      Beat();
      break;
    case ID:
      jj_consume_token(ID);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Beat() throws ParseException {
    label_3:
    while (true) {
      Sign();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case SEMITUNE:
      case SILENCE:
      case TUNE:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
    }
    jj_consume_token(ENDOFBEAT);
  }

  static final public void Sign() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      Group();
      break;
    case SEMITUNE:
    case SILENCE:
    case TUNE:
      Single();
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Group() throws ParseException {
    jj_consume_token(17);
    Note();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 19:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      Others();
    }
    jj_consume_token(18);
    Flagged();
  }

  static final public void Others() throws ParseException {
    jj_consume_token(19);
    Note();
  }

  static final public void Single() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMITUNE:
    case TUNE:
      Note();
      break;
    case SILENCE:
      jj_consume_token(SILENCE);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    Duration();
  }

  static final public void Note() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMITUNE:
      jj_consume_token(SEMITUNE);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(TUNE);
  }

  static final public void Duration() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUAVER:
    case SEMIQUAVER:
    case DEMISEMIQUAVER:
    case HEMIDEMISEMIQUAVER:
      Flagged();
      break;
    case SEMIBREVE:
    case MINIM:
    case CROTCHET:
      Unflagged();
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMIBREVE:
      case MINIM:
      case CROTCHET:
      case QUAVER:
      case SEMIQUAVER:
      case DEMISEMIQUAVER:
      case HEMIDEMISEMIQUAVER:
      case CROSSBEAT:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_5;
      }
      Extend();
    }
  }

  static final public void Extend() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CROSSBEAT:
      jj_consume_token(CROSSBEAT);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUAVER:
    case SEMIQUAVER:
    case DEMISEMIQUAVER:
    case HEMIDEMISEMIQUAVER:
      Flagged();
      break;
    case SEMIBREVE:
    case MINIM:
    case CROTCHET:
      Unflagged();
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
  }

  static final public void Flagged() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUAVER:
      jj_consume_token(QUAVER);
      break;
    case SEMIQUAVER:
      jj_consume_token(SEMIQUAVER);
      break;
    case DEMISEMIQUAVER:
      jj_consume_token(DEMISEMIQUAVER);
      break;
    case HEMIDEMISEMIQUAVER:
      jj_consume_token(HEMIDEMISEMIQUAVER);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Unflagged() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMIBREVE:
      jj_consume_token(SEMIBREVE);
      break;
    case MINIM:
      jj_consume_token(MINIM);
      break;
    case CROTCHET:
      jj_consume_token(CROTCHET);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public PentaParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[20];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x100,0x8000,0x7f000000,0x720000,0x720000,0x720000,0x720000,0x720000,0x720000,0x80000,0x700000,0x100000,0x7f000000,0x0,0x7f000000,0x0,0x7f000000,0x0,0x78000000,0x7000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x10,0x10,0x10,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x1,0x1,0x0,0x2,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public PentaParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PentaParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PentaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public PentaParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PentaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public PentaParser(PentaParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(PentaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[38];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 20; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 38; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
