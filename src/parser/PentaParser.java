/* Generated By:JavaCC: Do not edit this line. PentaParser.java */
package parser;

import parser.visitor.*;
import parser.syntaxtree.*;


public class PentaParser implements PentaParserConstants {

  static final public Scope Scope() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  Declarations n6 = null;
  Essay n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
    n1 = jj_consume_token(5);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(ID);
    n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(6);
    n4 = JTBToolkit.makeNodeToken(n5);
    n6 = Declarations();
    n7 = Essay();
    n9 = jj_consume_token(7);
    n8 = JTBToolkit.makeNodeToken(n9);
    {if (true) return new Scope(n0, n2, n4, n6, n7, n8);}
    throw new Error("Missing return statement in function");
  }

  static final public Declarations Declarations() throws ParseException {
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  BeatDeclaration n1 = null;
  SpeedDeclaration n2 = null;
  InstrumentDeclaration n3 = null;
  VelocityDeclaration n4 = null;
  NodeListOptional n5 = new NodeListOptional();
  StropheDeclaration n6 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 8:
      n1 = BeatDeclaration();
      n0.addNode(n1);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    n2 = SpeedDeclaration();
    n3 = InstrumentDeclaration();
    n4 = VelocityDeclaration();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 15:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      n6 = StropheDeclaration();
      n5.addNode(n6);
    }
    n5.nodes.trimToSize();
    {if (true) return new Declarations(n0, n2, n3, n4, n5);}
    throw new Error("Missing return statement in function");
  }

  static final public BeatDeclaration BeatDeclaration() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeChoice n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  NodeToken n23 = null;
  Token n24 = null;
    n1 = jj_consume_token(8);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(9);
    n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(DIGIT);
    n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(10);
    n6 = JTBToolkit.makeNodeToken(n7);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMIBREVE:
      n10 = jj_consume_token(SEMIBREVE);
        n9 = JTBToolkit.makeNodeToken(n10);
        n8 = new NodeChoice(n9, 0, 7);
      break;
    case MINIM:
      n12 = jj_consume_token(MINIM);
        n11 = JTBToolkit.makeNodeToken(n12);
        n8 = new NodeChoice(n11, 1, 7);
      break;
    case CROTCHET:
      n14 = jj_consume_token(CROTCHET);
        n13 = JTBToolkit.makeNodeToken(n14);
        n8 = new NodeChoice(n13, 2, 7);
      break;
    case QUAVER:
      n16 = jj_consume_token(QUAVER);
        n15 = JTBToolkit.makeNodeToken(n16);
        n8 = new NodeChoice(n15, 3, 7);
      break;
    case SEMIQUAVER:
      n18 = jj_consume_token(SEMIQUAVER);
        n17 = JTBToolkit.makeNodeToken(n18);
        n8 = new NodeChoice(n17, 4, 7);
      break;
    case DEMISEMIQUAVER:
      n20 = jj_consume_token(DEMISEMIQUAVER);
        n19 = JTBToolkit.makeNodeToken(n20);
        n8 = new NodeChoice(n19, 5, 7);
      break;
    case HEMIDEMISEMIQUAVER:
      n22 = jj_consume_token(HEMIDEMISEMIQUAVER);
        n21 = JTBToolkit.makeNodeToken(n22);
        n8 = new NodeChoice(n21, 6, 7);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n24 = jj_consume_token(11);
    n23 = JTBToolkit.makeNodeToken(n24);
    {if (true) return new BeatDeclaration(n0, n2, n4, n6, n8, n23);}
    throw new Error("Missing return statement in function");
  }

  static final public VelocityDeclaration VelocityDeclaration() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
    n1 = jj_consume_token(12);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(9);
    n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(INTEGER);
    n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(11);
    n6 = JTBToolkit.makeNodeToken(n7);
    {if (true) return new VelocityDeclaration(n0, n2, n4, n6);}
    throw new Error("Missing return statement in function");
  }

  static final public SpeedDeclaration SpeedDeclaration() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
    n1 = jj_consume_token(13);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(9);
    n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(INTEGER);
    n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(11);
    n6 = JTBToolkit.makeNodeToken(n7);
    {if (true) return new SpeedDeclaration(n0, n2, n4, n6);}
    throw new Error("Missing return statement in function");
  }

  static final public InstrumentDeclaration InstrumentDeclaration() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
    n1 = jj_consume_token(14);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(9);
    n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(ID);
    n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(11);
    n6 = JTBToolkit.makeNodeToken(n7);
    {if (true) return new InstrumentDeclaration(n0, n2, n4, n6);}
    throw new Error("Missing return statement in function");
  }

  static final public StropheDeclaration StropheDeclaration() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeOptional n6 = new NodeOptional();
  Sequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
    n1 = jj_consume_token(15);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(ID);
    n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(6);
    n4 = JTBToolkit.makeNodeToken(n5);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
    case SEMITUNE:
    case SILENCE:
    case TUNE:
    case ID:
      n7 = Sequence();
      n6.addNode(n7);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    n9 = jj_consume_token(7);
    n8 = JTBToolkit.makeNodeToken(n9);
    {if (true) return new StropheDeclaration(n0, n2, n4, n6, n8);}
    throw new Error("Missing return statement in function");
  }

  static final public Essay Essay() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeOptional n6 = new NodeOptional();
  Sequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
    n1 = jj_consume_token(16);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(ID);
    n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(6);
    n4 = JTBToolkit.makeNodeToken(n5);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
    case SEMITUNE:
    case SILENCE:
    case TUNE:
    case ID:
      n7 = Sequence();
      n6.addNode(n7);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    n9 = jj_consume_token(7);
    n8 = JTBToolkit.makeNodeToken(n9);
    {if (true) return new Essay(n0, n2, n4, n6, n8);}
    throw new Error("Missing return statement in function");
  }

  static final public Sequence Sequence() throws ParseException {
  // --- JTB generated node declarations ---
  NodeList n0 = new NodeList();
  Notes n1 = null;
    label_2:
    while (true) {
      n1 = Notes();
      n0.addNode(n1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case SEMITUNE:
      case SILENCE:
      case TUNE:
      case ID:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
    }
    n0.nodes.trimToSize();
    {if (true) return new Sequence(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Notes Notes() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  Beat n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
    case SEMITUNE:
    case SILENCE:
    case TUNE:
      n1 = Beat();
      n0 = new NodeChoice(n1, 0, 2);
      break;
    case ID:
      n3 = jj_consume_token(ID);
      n2 = JTBToolkit.makeNodeToken(n3);
      n0 = new NodeChoice(n2, 1, 2);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new Notes(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Beat Beat() throws ParseException {
  // --- JTB generated node declarations ---
  NodeList n0 = new NodeList();
  Sign n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
    label_3:
    while (true) {
      n1 = Sign();
      n0.addNode(n1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case SEMITUNE:
      case SILENCE:
      case TUNE:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
    }
    n0.nodes.trimToSize();
    n3 = jj_consume_token(ENDOFBEAT);
    n2 = JTBToolkit.makeNodeToken(n3);
    {if (true) return new Beat(n0, n2);}
    throw new Error("Missing return statement in function");
  }

  static final public Sign Sign() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  Group n1 = null;
  Single n2 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      n1 = Group();
      n0 = new NodeChoice(n1, 0, 2);
      break;
    case SEMITUNE:
    case SILENCE:
    case TUNE:
      n2 = Single();
      n0 = new NodeChoice(n2, 1, 2);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new Sign(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Group Group() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Note n2 = null;
  NodeListOptional n3 = new NodeListOptional();
  Others n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Flagged n7 = null;
    n1 = jj_consume_token(17);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Note();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 19:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      n4 = Others();
      n3.addNode(n4);
    }
    n3.nodes.trimToSize();
    n6 = jj_consume_token(18);
    n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Flagged();
    {if (true) return new Group(n0, n2, n3, n5, n7);}
    throw new Error("Missing return statement in function");
  }

  static final public Others Others() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Note n2 = null;
    n1 = jj_consume_token(19);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Note();
    {if (true) return new Others(n0, n2);}
    throw new Error("Missing return statement in function");
  }

  static final public Single Single() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  Note n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Duration n4 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMITUNE:
    case TUNE:
      n1 = Note();
        n0 = new NodeChoice(n1, 0, 2);
      break;
    case SILENCE:
      n3 = jj_consume_token(SILENCE);
        n2 = JTBToolkit.makeNodeToken(n3);
        n0 = new NodeChoice(n2, 1, 2);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n4 = Duration();
    {if (true) return new Single(n0, n4);}
    throw new Error("Missing return statement in function");
  }

  static final public Note Note() throws ParseException {
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMITUNE:
      n2 = jj_consume_token(SEMITUNE);
      n1 = JTBToolkit.makeNodeToken(n2);
      n0.addNode(n1);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    n4 = jj_consume_token(TUNE);
    n3 = JTBToolkit.makeNodeToken(n4);
    {if (true) return new Note(n0, n3);}
    throw new Error("Missing return statement in function");
  }

  static final public Duration Duration() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  Flagged n1 = null;
  Unflagged n2 = null;
  NodeOptional n3 = new NodeOptional();
  NodeToken n4 = null;
  Token n5 = null;
  NodeListOptional n6 = new NodeListOptional();
  Extend n7 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUAVER:
    case SEMIQUAVER:
    case DEMISEMIQUAVER:
    case HEMIDEMISEMIQUAVER:
      n1 = Flagged();
        n0 = new NodeChoice(n1, 0, 2);
      break;
    case SEMIBREVE:
    case MINIM:
    case CROTCHET:
      n2 = Unflagged();
        n0 = new NodeChoice(n2, 1, 2);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      n5 = jj_consume_token(DOT);
      n4 = JTBToolkit.makeNodeToken(n5);
      n3.addNode(n4);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMIBREVE:
      case MINIM:
      case CROTCHET:
      case QUAVER:
      case SEMIQUAVER:
      case DEMISEMIQUAVER:
      case HEMIDEMISEMIQUAVER:
      case CROSSBEAT:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_5;
      }
      n7 = Extend();
      n6.addNode(n7);
    }
    n6.nodes.trimToSize();
    {if (true) return new Duration(n0, n3, n6);}
    throw new Error("Missing return statement in function");
  }

  static final public Extend Extend() throws ParseException {
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  NodeToken n1 = null;
  Token n2 = null;
  NodeChoice n3 = null;
  Flagged n4 = null;
  Unflagged n5 = null;
  NodeOptional n6 = new NodeOptional();
  NodeToken n7 = null;
  Token n8 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CROSSBEAT:
      n2 = jj_consume_token(CROSSBEAT);
      n1 = JTBToolkit.makeNodeToken(n2);
      n0.addNode(n1);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUAVER:
    case SEMIQUAVER:
    case DEMISEMIQUAVER:
    case HEMIDEMISEMIQUAVER:
      n4 = Flagged();
        n3 = new NodeChoice(n4, 0, 2);
      break;
    case SEMIBREVE:
    case MINIM:
    case CROTCHET:
      n5 = Unflagged();
        n3 = new NodeChoice(n5, 1, 2);
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      n8 = jj_consume_token(DOT);
      n7 = JTBToolkit.makeNodeToken(n8);
      n6.addNode(n7);
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    {if (true) return new Extend(n0, n3, n6);}
    throw new Error("Missing return statement in function");
  }

  static final public Flagged Flagged() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUAVER:
      n2 = jj_consume_token(QUAVER);
      n1 = JTBToolkit.makeNodeToken(n2);
      n0 = new NodeChoice(n1, 0, 4);
      break;
    case SEMIQUAVER:
      n4 = jj_consume_token(SEMIQUAVER);
      n3 = JTBToolkit.makeNodeToken(n4);
      n0 = new NodeChoice(n3, 1, 4);
      break;
    case DEMISEMIQUAVER:
      n6 = jj_consume_token(DEMISEMIQUAVER);
      n5 = JTBToolkit.makeNodeToken(n6);
      n0 = new NodeChoice(n5, 2, 4);
      break;
    case HEMIDEMISEMIQUAVER:
      n8 = jj_consume_token(HEMIDEMISEMIQUAVER);
      n7 = JTBToolkit.makeNodeToken(n8);
      n0 = new NodeChoice(n7, 3, 4);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new Flagged(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Unflagged Unflagged() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMIBREVE:
      n2 = jj_consume_token(SEMIBREVE);
      n1 = JTBToolkit.makeNodeToken(n2);
      n0 = new NodeChoice(n1, 0, 3);
      break;
    case MINIM:
      n4 = jj_consume_token(MINIM);
      n3 = JTBToolkit.makeNodeToken(n4);
      n0 = new NodeChoice(n3, 1, 3);
      break;
    case CROTCHET:
      n6 = jj_consume_token(CROTCHET);
      n5 = JTBToolkit.makeNodeToken(n6);
      n0 = new NodeChoice(n5, 2, 3);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new Unflagged(n0);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public PentaParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[20];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x100,0x8000,0x7f000000,0x720000,0x720000,0x720000,0x720000,0x720000,0x720000,0x80000,0x700000,0x100000,0x7f000000,0x0,0x7f000000,0x0,0x7f000000,0x0,0x78000000,0x7000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x10,0x10,0x10,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x1,0x1,0x0,0x2,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public PentaParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PentaParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PentaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public PentaParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PentaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public PentaParser(PentaParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(PentaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[38];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 20; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 38; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

                          }

class JTBToolkit {

  static NodeToken makeNodeToken(final Token t) {
    return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
  }
}
