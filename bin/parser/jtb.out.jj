/* Generated by JTB 1.4.7 */


options
{
  JDK_VERSION = "1.5";
  static = true;
  // JTB_P = "parser";
}

PARSER_BEGIN(PentaParser)
package parser;

import parser.visitor.*;
import parser.syntaxtree.*;


public class PentaParser {}

class JTBToolkit {

  static NodeToken makeNodeToken(final Token t) {
    return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
  }
}

PARSER_END(PentaParser)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

Scope Scope() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  Declarations n6 = null;
  Essay n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
}
{
  n1 = "SHEET "
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < ID >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = "{"
  { n4 = JTBToolkit.makeNodeToken(n5); }
  n6 = Declarations()
  n7 = Essay()
  n9 = "}"
  { n8 = JTBToolkit.makeNodeToken(n9); }
  { return new Scope(n0, n2, n4, n6, n7, n8); }
}

Declarations Declarations() :
{
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  BeatDeclaration n1 = null;
  SpeedDeclaration n2 = null;
  InstrumentDeclaration n3 = null;
  VelocityDeclaration n4 = null;
  NodeListOptional n5 = new NodeListOptional();
  StropheDeclaration n6 = null;
}
{
  (
    n1 = BeatDeclaration()
    { n0.addNode(n1); }
  )?
  n2 = SpeedDeclaration()
  n3 = InstrumentDeclaration()
  n4 = VelocityDeclaration()
  (
    n6 = StropheDeclaration()
    { n5.addNode(n6); }
  )*
  { n5.nodes.trimToSize(); }
  { return new Declarations(n0, n2, n3, n4, n5); }
}

BeatDeclaration BeatDeclaration() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeChoice n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  NodeToken n23 = null;
  Token n24 = null;
}
{
  n1 = "BEAT"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = "="
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = < DIGIT >
  { n4 = JTBToolkit.makeNodeToken(n5); }
  n7 = "/"
  { n6 = JTBToolkit.makeNodeToken(n7); }
  (
    (
      n10 = < SEMIBREVE >
      { n9 = JTBToolkit.makeNodeToken(n10); }
      { n8 = new NodeChoice(n9, 0, 7); }
    |
      n12 = < MINIM >
      { n11 = JTBToolkit.makeNodeToken(n12); }
      { n8 = new NodeChoice(n11, 1, 7); }
    |
      n14 = < CROTCHET >
      { n13 = JTBToolkit.makeNodeToken(n14); }
      { n8 = new NodeChoice(n13, 2, 7); }
    |
      n16 = < QUAVER >
      { n15 = JTBToolkit.makeNodeToken(n16); }
      { n8 = new NodeChoice(n15, 3, 7); }
    |
      n18 = < SEMIQUAVER >
      { n17 = JTBToolkit.makeNodeToken(n18); }
      { n8 = new NodeChoice(n17, 4, 7); }
    |
      n20 = < DEMISEMIQUAVER >
      { n19 = JTBToolkit.makeNodeToken(n20); }
      { n8 = new NodeChoice(n19, 5, 7); }
    |
      n22 = < HEMIDEMISEMIQUAVER >
      { n21 = JTBToolkit.makeNodeToken(n22); }
      { n8 = new NodeChoice(n21, 6, 7); }
    )
    
  )
  n24 = ";"
  { n23 = JTBToolkit.makeNodeToken(n24); }
  { return new BeatDeclaration(n0, n2, n4, n6, n8, n23); }
}

VelocityDeclaration VelocityDeclaration() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
}
{
  n1 = "VELOCITY"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = "="
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = < INTEGER >
  { n4 = JTBToolkit.makeNodeToken(n5); }
  n7 = ";"
  { n6 = JTBToolkit.makeNodeToken(n7); }
  { return new VelocityDeclaration(n0, n2, n4, n6); }
}

SpeedDeclaration SpeedDeclaration() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
}
{
  n1 = "SPEED"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = "="
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = < INTEGER >
  { n4 = JTBToolkit.makeNodeToken(n5); }
  n7 = ";"
  { n6 = JTBToolkit.makeNodeToken(n7); }
  { return new SpeedDeclaration(n0, n2, n4, n6); }
}

InstrumentDeclaration InstrumentDeclaration() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
}
{
  n1 = "INSTRUMENT"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = "="
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = < ID >
  { n4 = JTBToolkit.makeNodeToken(n5); }
  n7 = ";"
  { n6 = JTBToolkit.makeNodeToken(n7); }
  { return new InstrumentDeclaration(n0, n2, n4, n6); }
}

StropheDeclaration StropheDeclaration() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeOptional n6 = new NodeOptional();
  Sequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
}
{
  n1 = "STROPHE"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < ID >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = "{"
  { n4 = JTBToolkit.makeNodeToken(n5); }
  (
    n7 = Sequence()
    { n6.addNode(n7); }
  )?
  n9 = "}"
  { n8 = JTBToolkit.makeNodeToken(n9); }
  { return new StropheDeclaration(n0, n2, n4, n6, n8); }
}

Essay Essay() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeOptional n6 = new NodeOptional();
  Sequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
}
{
  n1 = "ESSAY"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < ID >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = "{"
  { n4 = JTBToolkit.makeNodeToken(n5); }
  (
    n7 = Sequence()
    { n6.addNode(n7); }
  )?
  n9 = "}"
  { n8 = JTBToolkit.makeNodeToken(n9); }
  { return new Essay(n0, n2, n4, n6, n8); }
}

Sequence Sequence() :
{
  // --- JTB generated node declarations ---
  NodeList n0 = new NodeList();
  Notes n1 = null;
}
{
  (
    n1 = Notes()
    { n0.addNode(n1); }
  )+
  { n0.nodes.trimToSize(); }
  { return new Sequence(n0); }
}

Notes Notes() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  Beat n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
}
{
  (
    n1 = Beat()
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    n3 = < ID >
    { n2 = JTBToolkit.makeNodeToken(n3); }
    { n0 = new NodeChoice(n2, 1, 2); }
  )
  { return new Notes(n0); }
}

Beat Beat() :
{
  // --- JTB generated node declarations ---
  NodeList n0 = new NodeList();
  Sign n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
}
{
  (
    n1 = Sign()
    { n0.addNode(n1); }
  )+
  { n0.nodes.trimToSize(); }
  n3 = < ENDOFBEAT >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  { return new Beat(n0, n2); }
}

Sign Sign() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  Group n1 = null;
  Single n2 = null;
}
{
  (
    n1 = Group()
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    n2 = Single()
    { n0 = new NodeChoice(n2, 1, 2); }
  )
  { return new Sign(n0); }
}

Group Group() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Note n2 = null;
  NodeListOptional n3 = new NodeListOptional();
  Others n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Flagged n7 = null;
}
{
  n1 = "["
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Note()
  (
    n4 = Others()
    { n3.addNode(n4); }
  )*
  { n3.nodes.trimToSize(); }
  n6 = "]"
  { n5 = JTBToolkit.makeNodeToken(n6); }
  n7 = Flagged()
  { return new Group(n0, n2, n3, n5, n7); }
}

Others Others() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Note n2 = null;
}
{
  n1 = ","
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Note()
  { return new Others(n0, n2); }
}

Single Single() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  Note n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Duration n4 = null;
}
{
  (
    (
      n1 = Note()
      { n0 = new NodeChoice(n1, 0, 2); }
    |
      n3 = < SILENCE >
      { n2 = JTBToolkit.makeNodeToken(n3); }
      { n0 = new NodeChoice(n2, 1, 2); }
    )
    
  )
  n4 = Duration()
  { return new Single(n0, n4); }
}

Note Note() :
{
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
}
{
  (
    n2 = < SEMITUNE >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0.addNode(n1); }
  )?
  n4 = < TUNE >
  { n3 = JTBToolkit.makeNodeToken(n4); }
  { return new Note(n0, n3); }
}

Duration Duration() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  Flagged n1 = null;
  Unflagged n2 = null;
  NodeOptional n3 = new NodeOptional();
  NodeToken n4 = null;
  Token n5 = null;
  NodeListOptional n6 = new NodeListOptional();
  Extend n7 = null;
}
{
  (
    (
      n1 = Flagged()
      { n0 = new NodeChoice(n1, 0, 2); }
    |
      n2 = Unflagged()
      { n0 = new NodeChoice(n2, 1, 2); }
    )
    
  )
  (
    n5 = < DOT >
    { n4 = JTBToolkit.makeNodeToken(n5); }
    { n3.addNode(n4); }
  )?
  (
    n7 = Extend()
    { n6.addNode(n7); }
  )*
  { n6.nodes.trimToSize(); }
  { return new Duration(n0, n3, n6); }
}

Extend Extend() :
{
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  NodeToken n1 = null;
  Token n2 = null;
  NodeChoice n3 = null;
  Flagged n4 = null;
  Unflagged n5 = null;
  NodeOptional n6 = new NodeOptional();
  NodeToken n7 = null;
  Token n8 = null;
}
{
  (
    n2 = < CROSSBEAT >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0.addNode(n1); }
  )?
  (
    (
      n4 = Flagged()
      { n3 = new NodeChoice(n4, 0, 2); }
    |
      n5 = Unflagged()
      { n3 = new NodeChoice(n5, 1, 2); }
    )
    
  )
  (
    n8 = < DOT >
    { n7 = JTBToolkit.makeNodeToken(n8); }
    { n6.addNode(n7); }
  )?
  { return new Extend(n0, n3, n6); }
}

Flagged Flagged() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
}
{
  (
    n2 = < QUAVER >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0 = new NodeChoice(n1, 0, 4); }
  |
    n4 = < SEMIQUAVER >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n0 = new NodeChoice(n3, 1, 4); }
  |
    n6 = < DEMISEMIQUAVER >
    { n5 = JTBToolkit.makeNodeToken(n6); }
    { n0 = new NodeChoice(n5, 2, 4); }
  |
    n8 = < HEMIDEMISEMIQUAVER >
    { n7 = JTBToolkit.makeNodeToken(n8); }
    { n0 = new NodeChoice(n7, 3, 4); }
  )
  { return new Flagged(n0); }
}

Unflagged Unflagged() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
}
{
  (
    n2 = < SEMIBREVE >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0 = new NodeChoice(n1, 0, 3); }
  |
    n4 = < MINIM >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n0 = new NodeChoice(n3, 1, 3); }
  |
    n6 = < CROTCHET >
    { n5 = JTBToolkit.makeNodeToken(n6); }
    { n0 = new NodeChoice(n5, 2, 3); }
  )
  { return new Unflagged(n0); }
}

TOKEN :
{
  < SEMITUNE : "#"| "!" >
| < SILENCE : "SILENCE" >
| < TUNE : "DO"| "RE"| "MI"| "FA"| "SOL"| "LA"| "SI"| "DO^"| "RE^"| "MI^"| "FA^"| "SOL^"| "LA^"| "SI^" >
| < GROUP : "_" >
| < SEMIBREVE : "(1)" >
| < MINIM : "(2)" >
| < CROTCHET : "(4)" >
| < QUAVER : "(8)" >
| < SEMIQUAVER : "(16)" >
| < DEMISEMIQUAVER : "(32)" >
| < HEMIDEMISEMIQUAVER : "(64)" >
| < ENDOFBEAT : "|" >
| < CROSSBEAT : "+" >
| < DOT : "." >
| < DIGIT : ["0"-"9"] >
| < INTEGER : ( <DIGIT> )+ >
| < ID : <CHAR> ( <CHAR>| <DIGIT> )* >
| < CHAR : ["A"-"Z"]| ["a"-"z"] >
}
